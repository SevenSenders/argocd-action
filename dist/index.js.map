{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://argo-cd-action/../../../../opt/homebrew/Cellar/ncc/0.34.0/libexec/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://argo-cd-action/external node-commonjs \"child_process\"","../webpack://argo-cd-action/webpack/bootstrap","../webpack://argo-cd-action/webpack/runtime/compat","../webpack://argo-cd-action/./index.js"],"sourcesContent":[null,"module.exports = require(\"child_process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const yaml = require('js-yaml');\nconst {execSync} = require('child_process');\nconst core = require('@actions/core');\nconst {ECRClient, BatchGetImageCommand, PutImageCommand} = require(\"@aws-sdk/client-ecr\");\n\nconst env = process.env.ENVIRONMENT_NAME;\nconst branch = core.getInput('target-branch');\nconst commit_hash = core.getInput('target-commit');\nconst env_name = clean_environment_name(branch);\nconst app_name = [process.env.TEAM, env, process.env.SERVICE_NAME].join('-');\nconst argocd_user = process.env.ARGOCD_USER ?? 'bitbucket';\nconst argocd_wait_timeout = process.env.ARGOCD_WAIT_TIMEOUT ?? 300;\nconst argocd_sync_wait_timeout = process.env.ARGOCD_SYNC_WAIT_TIMEOUT ?? 300;\nconst deployment_type = process.env.DEPLOYMENT_TYPE ?? 'promote';\nconst wait_arguments = process.env.WAIT_ARGUMENTS ?? '--operation --health --sync';\nconst deployment_override_file_name = process.env.DEPLOYMENT_OVERRIDE_VALUES_FILE_NAME ?? '';\nconst aws_default_region = process.env.AWS_DEFAULT_REGION ?? 'eu-central-1';\n\nconst argocd_servers = {\n    dev: 'argocd-dev.infra.aws.7senders.com',\n    prod: 'argocd.infra.aws.7senders.com',\n}\nconst argocd_host = env === 'prod' ? argocd_servers.prod : argocd_servers.dev;\n\nlogin_to_argocd()\n    .then(\n        _result => {\n            switch (deployment_type) {\n                case 'promote':\n                    deployment_promotion();\n                    break;\n                case 'preview':\n                    create_preview_environment();\n                    break;\n                case 'destroy':\n                    destroy_preview_environment();\n                    break;\n                case 'clean':\n                    destroy_preview_environments();\n                    break;\n                default:\n                    core.setFailed(`DEPLOYMENT_TYPE ${deployment_type} should be one of \"promote\", \"preview\", \"destroy\" or \"clean\".`);\n            }\n        }\n    ).catch(\n    e =>\n        core.setFailed(`Failed to login into ArgoCD: ${e.message}`)\n);\n\nasync function login_to_argocd() {\n    const command = `argocd login ${argocd_host}:443 --grpc-web --username ${argocd_user} --password \"${process.env.ARGOCD_PASSWORD}\"`\n    execSync(command, {stdio: 'inherit'});\n}\n\nfunction get_client() {\n    try {\n        return new ECRClient({region: aws_default_region});\n    } catch (e) {\n        core.setFailed(\"Failed to create ECR client.\");\n    }\n}\n\nasync function promote_image() {\n    const client = get_client();\n    const image_name = process.env.DOCKER_REPO ?? process.env.IMAGE_NAME;\n    const check_image = new BatchGetImageCommand({\n        repositoryName: image_name,\n        imageIds: [\n            {\n                'imageTag': commit_hash\n            }\n        ]\n    });\n    const current_image = await client.send(check_image);\n    if (current_image.images.length === 0) {\n        core.info(`Manifest for ${image_name} : ${commit_hash} in not found. You should run manually or wait for finishing the build step in your pipeline.`);\n    }\n    const current_manifest = current_image['images'][0]['imageManifest'];\n    const check_previous_image = new BatchGetImageCommand({\n        repositoryName: image_name,\n        imageIds: [\n            {\n                'imageTag': env\n            }\n        ]\n    });\n    let previous_manifest;\n    const previous_image = await client.send(check_previous_image);\n    if (previous_image.images.length !== 0) {\n        previous_manifest = previous_image['images'][0]['imageManifest'];\n    } else {\n        previous_manifest = 'NOT FOUND';\n    }\n    if (current_manifest !== previous_manifest) {\n        core.info(`Promoting ${image_name}:latest to ${env} environment.`);\n        const put_docker_image = new PutImageCommand({\n            repositoryName: image_name,\n            imageManifest: current_manifest,\n            imageTag: env\n        });\n        await client.send(put_docker_image);\n    } else {\n        core.info(\"Promoting is not necessary, the same image exists in ECR.\");\n    }\n    return true;\n}\n\nfunction deploy_to_argocd() {\n    try {\n        if (process.env.SERVICE_NAME == \"airflow\") {\n            // this is exceptional case for airflow deployments as it is using custom helm chart, rather than \"deployment\" chart\n            const deploy_app = `argocd app set ${app_name} --parameter airflow.airflow.image.tag=${commit_hash}`\n        } else {\n            const deploy_app = `argocd app set ${app_name} --parameter global.image.tag=${commit_hash}`\n        }\n        execSync(deploy_app);\n        core.info(`The new image: ${commit_hash} was set.`);\n    } catch (error) {\n        core.setFailed(`Failed to update application ${app_name} with image ${commit_hash}!`);\n    }\n    try {\n        const wait_operation = `argocd app wait ${app_name} --operation --health --timeout ${argocd_wait_timeout}`\n        execSync(wait_operation);\n        core.info(`${app_name} is green.`);\n    } catch (error) {\n        core.setFailed(`Failed to wait for application ${app_name} change complete.`);\n    }\n    try {\n        const app_sync = `argocd app sync ${app_name}`\n        execSync(app_sync);\n    } catch (error) {\n        core.setFailed(`Failed to deploy application ${app_name} to ${env} environment!`);\n    }\n    try {\n\n        const wait_sync = `argocd app wait ${app_name} ${wait_arguments} --timeout ${argocd_sync_wait_timeout}`\n        execSync(wait_sync);\n        core.info(`${app_name} was synced.`);\n    } catch (error) {\n        core.setFailed(`Failed to wait for sync application ${app_name} change complete.`);\n    }\n    core.info(`${app_name} was deployed.`);\n}\n\nfunction clean_environment_name(name) {\n    const clean_name = name\n        .replace('feature/', '')\n        .replace('hotfix/', '')\n        .replace('bugfix/', '')\n        .replace('-', '');\n    return clean_name.slice(0, 8)\n        .replaceAll(/[^a-zA-Z\\d-]+/g, '')\n        .replace(/^-+/g, '')\n        .replace(/-+$/g, '')\n        .replaceAll(/-/g, '')\n        .toLowerCase();\n}\n\nfunction create_preview_environment() {\n    const preview_app_name = app_name.replace('-dev-', `-${env_name}-`);\n    try {\n        const check_exists = `argocd app get ${preview_app_name}`\n        execSync(check_exists, {stdio: 'ignore'});\n        try {\n            const update_image = `argocd app set ${preview_app_name} --parameter global.image.tag=${commit_hash} --values-literal-file ${deployment_override_file_name}`\n            execSync(update_image);\n            core.info(`The new image: ${commit_hash} was set.`);\n        } catch (error) {\n            core.setFailed(`The new image: ${commit_hash} wasn't set.`);\n        }\n        try {\n            const wait_operation = `argocd app wait ${preview_app_name} --operation --health --timeout ${argocd_wait_timeout}`\n            execSync(wait_operation);\n            core.info(`${preview_app_name} is green.`);\n        } catch (error) {\n            core.setFailed(`${preview_app_name} is red. Please check the argocd web interface.`);\n        }\n        try {\n            const sync = `argocd app sync ${preview_app_name}`\n            execSync(sync);\n        } catch (error) {\n            core.setFailed(\"I can't run the sync command. Please check the argocd web interface.\");\n        }\n        try {\n            const wait_sync = `argocd app wait ${preview_app_name} --operation --health --sync --timeout ${argocd_sync_wait_timeout}`\n            execSync(wait_sync);\n            core.info(`${preview_app_name} was synced.`);\n        } catch (error) {\n            core.setFailed(`${preview_app_name} wasn't synced. Please check the argocd web interface.`);\n        }\n        core.info(`${preview_app_name} was deployed.`);\n    } catch (error) {\n        core.info(`${preview_app_name} will be created.`);\n        try {\n            const get_config = `argocd app get ${app_name} -o yaml`;\n            const dev_config = execSync(get_config);\n            try {\n                const config = yaml.load(dev_config);\n                const create_command = `\n                    argocd app create ${preview_app_name} \\\n                        --project ${config['spec']['project']} \\\n                        --dest-server ${config['spec']['destination']['server']} \\\n                        --dest-namespace ${config['spec']['destination']['namespace']} \\\n                        --repo ${config['spec']['source']['repoURL']} \\\n                        --path ${config['spec']['source']['path']} \\\n                        --values values.yaml --values values-dev.yaml \\\n                        --values-literal-file ${deployment_override_file_name} \\\n                        --parameter global.pillar=${config['spec']['source']['helm']['parameters'][0]['value']} \\\n                        --parameter global.serviceName=${config['spec']['source']['helm']['parameters'][1]['value']} \\\n                        --parameter global.environmentName=${env_name} \\\n                        --parameter global.image.tag=${commit_hash} \\\n                        --parameter deployment.fullnameOverride=${preview_app_name} \\\n                        --label original=${app_name} \\\n                        --label branch=${env_name} \\\n                        --label environment=preview \\\n                        --label repository=${process.env.GITHUB_REPOSITORY.replace('SevenSenders/', '')} \\\n                        --sync-policy automated \\\n                        --sync-option Prune=true \\\n                        --sync-option CreateNamespace=false \\\n                        --self-heal \\\n                        --upsert\n                        `;\n                execSync(create_command);\n                core.info(`${preview_app_name} was created!`);\n            } catch (e) {\n                core.setFailed(`Failed to deploy application ${app_name} to Preview environment: ${env_name}!`);\n            }\n        } catch (e) {\n            core.setFailed(`Failed to get configuration of ${app_name}!`);\n        }\n    }\n    core.info(`The ArgoCD link for your application: https://${argocd_host}/applications/${process.env.TEAM}-${env_name}-${process.env.SERVICE_NAME}`);\n}\n\nfunction destroy_preview_environment() {\n    const preview_app_name = app_name.replace('-dev-', `-${env_name}-`);\n    try {\n        const delete_command = `argocd app delete ${preview_app_name}`\n        execSync(delete_command);\n        core.info(`${preview_app_name} was destroyed!`);\n    } catch (e) {\n        core.setFailed(`Failed to destroy application ${preview_app_name}!`);\n    }\n}\n\nfunction destroy_preview_environments() {\n    try {\n        const preview_apps_command = `argocd app list -o name --selector environment=preview --selector original=${app_name}`\n        const preview_apps = execSync(preview_apps_command).toString();\n        const list_of_apps = preview_apps.split(/\\r?\\n/).filter(item => item);\n        let delete_app;\n        list_of_apps.forEach(function (app) {\n            try {\n                delete_app = `argocd app delete ${app}`\n                execSync(delete_app);\n                core.warning(`${delete_app} was deleted.`);\n            } catch (e) {\n                core.setFailed(`Failed to delete preview environments: ${delete_app}!`);\n            }\n        });\n    } catch (e) {\n        core.setFailed(`Failed to list preview environments for ${app_name}!`);\n    }\n}\n\nfunction deployment_promotion() {\n    promote_image()\n        .then(\n            result => {\n                if (result) {\n                    core.info(`Deploying application ${app_name} to ${env} environment`);\n                    core.info(`Details at https://${argocd_host}/applications/${app_name}`);\n                    deploy_to_argocd();\n                    core.info(`Successfully deployed application ${app_name} to ${env} environment!`);\n                }\n            }\n        )\n        .catch(\n            e =>\n                core.setFailed(e.message)\n        );\n}\n"],"names":[],"sourceRoot":""}